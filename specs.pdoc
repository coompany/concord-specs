---
title: Concord
subtitle: A Distributed Voting Protocol
author: acidghost
bibliography: bib.bibtex
lang: en
---

## Network Protocol
Based on *Kademlia* [@maymounkov2002kademlia] and its extension *S/Kademlia*
[@baumgart2007s]. Each node is identified by a `nodeId` which is computed using
a crypto puzzle. The puzzle generates also a key pair that is used to sign and
verify integrity of messages.

Kademlia uses four RPCs for node / value lookup, routing table maintenance and
storing values in the DHT:

- `PING`: usual ping / pong request to check liveness of nodes;
- `STORE`: instructs the target node to store a `(key, value)` pair;
- `FIND_NODE`: takes a `nodeId` as an argument and the recipient of the request
    returns a list of $k$ triples `(IPaddr, port, nodeId)` of nodes closest to
    the queried `nodeId`;
- `FIND_VALUE`: behaves like `FIND_NODE` with the exception that if the target
    node has previously received a `STORE` request for the target key, it will
    return the stored value directly.

At the moment Concord implements only `PING` and `FIND_NODE` RPCs. This is
because the other ones seem related to a file-sharing application. The future
development of the voting protocol will tell us if and in what extent Concord
will need to implement `STORE` and `FIND_VALUE` procedures.


## Voting Protocol
The goal of this protocol is to allow anyone to create a poll and collect
opinions on it. Each node is itself a voter and everyone is free to participate
in the voting process. Each voter is also responsible of verification of votes
and votes counting.

~~~~~~~~{.plantuml}
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response

Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
~~~~~~~~~



##Â References
